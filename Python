num=input('enter a numer:')
sum=0
for i in num:
    sum+=int(i)
print(sum)

def greater(a,b):
    if a>b:
        return a
    else:
        return b
def greatest(a,b,c):
    if greater(a,b)<c:
        return c
def grt(a,b,c):
    big=greater(a,b)
    return greater(big,c)

print(greatest(5,6,7)) 
print(grt(1,-1,0))

num= int(input('enter a range'))
a=0
b=1
i=0
if num==0:
    print(a)
elif num==1:
    print(a,b)
else:
    print(a,b,end=' ')
    while i < num-1:
        c=a+b
        a=b
        b=c
        i+=1
        print(c,end=' ')    
print()   

num=int(input('enter a num'))
def fibo(num):
    a=0
    b=1
    i=0
    if num==0:
        print(a)
    elif num==1:
        print(a,b)
    else:
        print(a,b,end=' ')
        while i < num-1:
            c=a+b
            a=b
            b=c
            i+=1
            print(c,end=' ')  
    
fibo(num)    

def inf(f_name,l_name='none', age=' none'):
    print('you f name is',f_name)
    print('your l name is',l_name)
    print('your age is',age)
inf('pou')

# SCOPE
def fun():
9    x=3
    return x
def fun1():
    return x
fun()

#Raw string formating
print(r'hellow \n mantu')

#input multiple number with split method
a,b=(input('enter firstnum and second number')).split(',')
print(f'first number {a}')
print(b)

#Different Type of print statement
name='pou'
age=25
print('hello ' + name + ' your age is '+ str(age))
print('hello {} your age is {}'.format(name,age))
print(f'hello {name} your age is {age}')
print('hello',name + ' your age is',age+1 )

#replace method
string='she is a beautiful girl'
print(string.replace("s", 'd',1))
string.find('bea')

#Center method
name='pourav'
name.center(len(name)+7,'*')

#joint method
user_info='pourav 24'
spl=user_info.split(',')
print(spl)
list1=['pourav sahoo','24']
info=','.join(list1)
info

# function returning two value
def func1(a,b):
    add=a+b
    multi=a*b
    return add,multi
func1(5,6)
add, mul=func1(5,6)
print(add)

#Dictionary
user1={'name':'pou','age':24,'movie':['a','b','c']}
user1['name']
user1['age']
user1['movie'][1]
user1={'name':{'fname':'pou','lname':'sahoo'}}
user1['name']['fname']
user2={}
user2['sal']={'mon':100,'teu':200}
print(user2)
user2['sal']['mon']
#del1=user1.pop('name')
#print(del1)
if 'name' in user1:
    print('pr')
else:
    print('npr')
if 24 in user1.values():
    print('pr')
else:
    print('npr')
# VALUE, ITEM, METHOD    
user1={'name':'pou','age':24,'movie':['a','b','c']}
if 'pou' in user1.values():
    print('p')
else:
    print('a')
print(user1.items())
for i in user1.values():
    print(i)
for i,j in user1.items():
    print(f'key is {i} and value is {j}')
    
user1={'name':'pou','age':24,'movie':['a','b','c']}
user1['song']='perfect'
#del1=user1.pop('name')
#type(del1)
del2=user1.popitem()
type(del2)
user1={'name':'pou','age':24,'movie':['a','b','c']}
user2['sal']={'mon':100,'teu':200}
user1.update(user2)
print(user1)

d=dict.fromkeys('acbn','unknown')
d

d={'name':'pou','age':24,'movie':['a','b','c']}
print(d.get('name'))
print(d['name'])
d1=d.copy()
d1.popitem()
d1
d

#list comprihension
l=[]
for i in range(1,11):
    l.append(i**2)
print(l)
l2=[i**2 for i in range(1,11)]
print(l2)

l=[]
for i in range(1,11):
    l.append(-i)
print(l)    
l1=[-i for i in range(1,11)]
print(l1)

#List comprehension with IF statement
num=list(range(1,11))
num=[i for i in num if i%2==0]
num1=[]
for i in num:
    if i%2==0:
        num1.append(i)
print(num1)        

#list comprehension with IF ELSE Statement
def func(num):
    nums=[]
    for i in num:
        if i%2==0:
            nums.append(i*2)
        else:
            nums.append(-i)
    return nums        
#func(list(range(1,11)))
def func1(l):
    return [2*i  if i%2==0 else -i for i in l]
func1(list(range(1,11)))

#NESTED LIST with list comprehension
num=[[i for i in range(1,4)] for j in range(3)]
num

#dictionary comprehension
dict1={f' square of {n}':n**2 for n in range(1,11)}
for k ,v in dict1.items():
    print(f'{k} is {v}')

#Character Count with dictionary comprehension
d1={}
for i in name:
    v=name.count(i)
    d1[i]=v
print(d1)   
name='Pourav Kumar Sahoo'
d={char:name.count(char) for char in name }
print(d)

#IF ELSE with dictionary comprehension
d3={i:'even' if i%2==0 else 'odd' for i in range(1,11)}
print(d3)

#set coprehension
s1={1,2,3,4,}
print(type(s1))

s2={i**2 for i in range(3)}
s2

#STAR ARGS(*Args)
def add(*args):
    t=0
    for i in args:
        t+=i
    return t    
add(1,2,4,6,7,8)

#star args as normal parameter which always return as a tuple
def mnum(num,*args):
    m=1
    for i in args:
        m*=i
    return m,num
    
mnum(3,4,5,6)

#star args as argumrnts
def func(*args):
    m=1
    for i in  args:
        m*=i
    return m
num=3,5,7,2
func(*num) #to unpack value list/tuple

def po(n,*m):
    if m:
        return [i**n for i in m]
    else:
        print('the pass list is empty')

l=[2,3,4,5]
po(*l) 

#Keyword arguments(**kwargs) which always return as dictionary 
def name(**n):
    return n
print(name(fname='pou',lname='sahoo'))
d={'fname':'pou','lname':'sahoo'}
name(**d)

def rev(*l,**d):
    if d=={'rev':'true'}:
        return [i[::-1].title() for i in l]
    else:
        return [i[::-1] for i in l]
l=['porav','kumar','sahoo']        
rev(*l,rev='true')            

#LAMBDA EXPRESSION Defining Function in one line
add = lambda a,b:a+b
add(3,4)    

def is_even(n):
    return n%2==0
        
is_even(3)   
even=lambda n:n%2==0
print(even(4))
func=lambda n: 'even' if n%2==0 else 'odd'
func(11)

#lambda expression with if else statement
def func(s):
    if len(s)>5:
        return 'large str'
    return 'small str'
func('pourav')    
func1= lambda s: 'large str' if len(s)>5 else 'small str'
func1('mantu')
   
#ENUMERATE FUNCTION
def pos(*l):
    po=0
    for i in l:
        print(f'{po} -->',i)
        po+=1 
l1=['abc','jkl','xyz']         
def  fun(l,find):
    for pos,l in enumerate(l):
        if l==find:
            return pos
    return -1   
fun(['abc','jkl','xyz'],'abj' )

# MAP FUNCTION
sq=lambda a:a**2
l1=[sq(i) for i in range(2,7)]
print(l1)    
q=list(map(sq,range(7,13)))
print(q)

# filter Function
def iseven(l):
    l1=[]
    for i in l:
        if i%2==0:
            l1.append(i)
    return l1
iseven([1,2,3,4,5])
 
#with filter
def eve(l):
    return l%2==0
tuple(filter(eve,range(1,10)))
#with lambda and filter
print(tuple(filter(lambda a:a%2==0 , range(1,10))))

q=(map(lambda a:a**2,range(7,13)))
print(next(q))
print(next(q))


#Iterator VS Iterable
n=[1,2,3,4,5,6]
#for i in n:
    #print(i)
num=iter(n)    
print(next(num))
print(next(num))
print(next(num))

#zip function
l1=[1,2,3,4,5]
l2=('a','b','c','d','e')
print(list(zip(l1,l2)))

l=[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]
l1,l2=zip(*l)
l1,l2

l1=[1,2,3,4,5]
l2=[4,5,2,3,8]
l=[]
for i in zip(l1,l2):
    l.append(max(i))
print(l)    

def fun(*l):
    l2=[]
    for i in range(1):
        p=list(zip(*l))
        for j in p:
            av=sum(j)/len(l)
            l2.append(av)
    return l2 
l1=([1,2,3],[2,4,5],[4,5,6])
fun(*l1)

funj= lambda *l: [sum(i)/len(i) for i in zip(*l)]
funj([1,2,3],[2,4,5],[4,5,6])

#ANY & ALL FUNCTION
def add(*args):
    if all([type(i)==int or type(i)==float for i in args]):
        ad=0
        for i in args:
            ad+=i
        return ad
    else: return 'wrong input'
add(2,3,4,5,6,4.5)

#ADVANCE MIN MAX FUNCTION
name=['abc','abcd','abcde','wertyurt']
min(name)
student=[
    {'name':'abc','score':42,'age':44},
    {'name':'jknm','score':23,'age':18},
    {'name':'ab','score':14,'age':33}

]
max(student,key=(lambda d:d['score']))['name']

student={
    'a':{'name':'abc','score':42,'age':44},
    'b':{'name':'jknm','score':23,'age':18},
    'c':{'name':'ab','score':14,'age':33}    
}

max(student,key=lambda d:student[d]['name'])

#Sorted Function
l=['a','v','d']
l1=('a','v','d')
l.sort(reverse=1)
print(sorted(l1))

s=[
    {'name':'abc','score':42,'age':44},
    {'name':'jknm','score':23,'age':18},
    {'name':'ab','score':14,'age':33}

]
sorted(s, key= lambda d:d.get('age'))

s1={
    'e':{'name':'abc','score':42,'age':44},
    'b':{'name':'jknm','score':23,'age':18},
    'c':{'name':'ab','score':14,'age':33}    
}
sorted(s1,key= lambda d:s1[d]['name'])

#Writing Docstring
def add(a,b):
    '''this will return the sum of the passed argument
    '''
    return a+b
add.__doc__

#pass function as a argument
def add(a,b):
    return a+b
a=add
a(4,6)
print(a)
print(add)
l=[5,2,3,4]
def square(a):
    return a**2
#print(list(map(square, l)))
def my_sq(func,l):
    
    l1=[]
    for i in l:
        l1.append(func(i))
    return l1
#my_sq(square,l)

def my_sq1(func,l):
    return [func(i) for i in l]
my_sq1(square,l)

#function returning function Called as closures
def outer():
    def inner():
        print('abc')
    return inner
v=outer()

def outer1(a):
    def inner1():
        print('the msg is:',a)
    return inner1
v1=outer1('fvnsjrnonvns')
v1()

def func1(po):
    def func2(num):
        return num**po
    return func2
n=func1(2)
n(3)

#DECORATORS is to enhance the functionality(important topic)
def decorators(any_func):
    def wrapper_func():
        print('this is decorators')
        any_func()
    return wrapper_func
@ decorators
def func():
    print('this is func')
func()

from functools import wraps
def dec(an):
    @wraps(an)
    def wr(*a):
        '''this is dec'''
        print('this is decorators')
        return an(*a)
    return wr
@dec    
def add(*n):
    '''this is add'''
    return sum(n)
add(2,3,4,5)
add.__doc__

from functools import wraps
def deco(an):
    @wraps(an)
    def wrap(*a):
        print(f'you are calling {an.__name__} function')
        print(an.__doc__)
        return an(*a)
    return wrap
@ deco
def add(a,b):
    '''this function takes two value and give there sum'''
    return a+b
add(5,4)

#calculate TIME
import time
from functools import wraps
def dec(an):
    @wraps(an)
    def wrap(*a):
        print(f'you are using {an.__name__} function')
        t1=time.time()
        returned=an(*a)
        t2=time.time()
        t=t2-t1
        print(f'this function take {t} much second')
        return returned
    return wrap
@dec        
def od_ev(n):
    if n%2==0:
        return 'even'
    return 'odd'

@dec
def sq(n):
    return [i**2 for i in range(1,n+1)]
sq(5)

def dec(an):
    def wrap(*a):
        data_type=[]
        for i in a:
            data_type.append(type(i)==int)
        if all(data_type):
            return an(*a)
        else: print('wrong input')
    return wrap
    
@dec
def add(*args):
    total=0
    for i in args:
        total+=i
    return total
add(1,2,3,[1,2])   

# DECORATORS WITH ARGUMENTS
def only_datatype(data_type):
    def dec(an):
        def wrap(*a):
            d=[]
            for i in a:
                d.append(type(i)==data_type)
            if all(d):
                return an(*a)
            else: print('wrong input')
        return wrap
    return dec
@only_datatype(int)
def str_con(*s):
    st=0
    for i in s:
        st+=i
    return st 
print(str_con(2,3,4))

# GENERATOR is same like ITERATORS
def fun(n):
    for i in range(n):
        yield(i)
num=fun(5)        
for i in num:
    print(i)
for i in num:
    print(i)    

#Generator comprehension instade of square bracket use parenthesis
sq=(i**2 for i in range(5000000))
sq

#OBJECT ORIENTED PROGRAMMING--(OOP)(class,method,instance=object)
#CREATE CLASS
class Person:
    def __init__(self,first_name,last_name,age):
        #create instance variable
        self.first_name=first_name
        self.last_name=last_name
        self.age=age
        self.full_name=first_name+' '+ last_name
#CREATE OBJECT
p1=Person('pourav','sahoo',25)
p1.first_name
p1.full_name

class Laptop:
    def __init__(self,brand_name,ram,price):
        self.B=brand_name
        self.ram=ram
        self.price=price
lap1=Laptop('HP','8gb','40k')    
lap1.price

#CREATE INSTANCE(OBJECT) METHODS
class Person:
    def __init__(self,first_name,last_name,age):
        self.fname=first_name
        self.lname=last_name
        self.age=age
    def full_name(self,m):
        return (f'{self.fname} {m} {self.lname}')
    def is_18(self):
        if self.age>18:
            return 'adult'
        return 'minor'
p1=Person('pourav','sahoo',25) 
p1.full_name('kumar')
Person.full_name(p1,'ku.')
p1.is_18()

class laptop:
    def __init__(self, brand_name,ram,price):
        self.brand_name=brand_name
        self.ram=ram
        self.price=price
    def discount(self,n):
        return self.price-(self.price*(n/100))
lap1=laptop('hp','8gb',500000)    
lap1.ram
lap1.discount(40)
laptop.discount(lap1,20)

#CLASS VARIABLE IS LIKE GLOBAL VARIABLE
class Circle:
    pi=3.14
    def __init__(self,radius):
        self.radius=radius
    def area(self):
        return Circle.pi*(self.radius**2)
    def circum(self):
        return 2*Circle.pi*self.radius
cir1=Circle(3)
cir2=Circle(5)
cir1.area()
cir1.circum()
cir2.circum()

class Person:
    count=0
    def __init__(self,name):
        Person.count+=1
        self.name=name
    def count_instance(self):
        return Person.count
p1=Person('pourav')
p2=Person('mantu')
p1.count_instance()

class Laptop:
    dis=10
    def __init__(self,brand_name,ram,price):
        self.bname=brand_name
        self.ram=ram
        self.p=price
    def disc(self):
        return self.p-(self.p*(self.dis/100))
Laptop.dis=30
lap2=Laptop('dell','4gb',50000)
lap1=Laptop('hp','8gb',60000)
lap1.dis=40
lap1.__dict__
lap1.disc()

#Class Method is like Global Method used a decorator name @classmethod
class Person:
    count=0
    def __init__(self, name):
        Person.count+=1
        self.name=name
    @classmethod
    def instance_count(cls):
        return f'you have created {Person.count} instance of {cls.__name__} class'
p1=Person('pourav')
p1=Person('sahoo')
Person.instance_count()

#Class Method as a Constructor
class Person:
    def __init__(self, fname,lname,age):
        self.fname=fname
        self.lname=lname
        self.age=age
    def full_name(self):
        return f'{self.fname} {self.lname}'
    @classmethod
    def fr_str(cls,string):
        fnam,lname,age=string.split(',')
        return cls(fnam,lname,age)
p1=Person('pourav','sahoo',25)
p1.full_name()
p2=Person.fr_str('mantu,sahoo,24')
p2.full_name()

#Static Method is not related to class or object
class Person:
    def __init__(self,fname,lname,age):
        self.fname=fname
        self.lname=lname
        self.age=age
    @staticmethod
    def hello():
        return 'hello static method is called'
p1=Person('pourav','kumar',25)
#Person.hello()
p1.hello()

#Encapsulation, Abstraction, Name Mangling
class Phone:
    def __init__(self, brand, model_name,price):
        self.brand=brand
        self.model_name=model_name
        self._price=price #(self._price is a naming convention)
        def make_a_call(self,phone_number):
            print(f'{phone_number } is calling ....')
        def full_name(self):
            return f'{self.brand} {self.model_name}'
ph1=Phone('nokia',1100, 2000)

ph1.__dict__
ph1._Phone__price


#OOP Property and setter decorater
class Phone:
    def __init__(self, brand, model_name,price):
        self.brand=brand
        self.model_name=model_name
        if price>0: # for no negative value
            self._price=price #(self._price is a naming convention)
        else: self._price=0 
#TO set Price to only posotive value we use first @property(getter method) then setter decorator
    @property
    def price(self):
        return self._price
    @price.setter
    def price(self, n_price):
         self._price=max(n_price,0)
            
    @property    #no need to call as function    
    def specification(self):
        return f'{self.brand} {self.model_name} and price is {self._price}'
    def make_a_call(self,phone_number):
        print(f'{phone_number } is calling ....')
    def full_name(self):
        return f'{self.brand} {self.model_name}'
ph1=Phone('nokia',1100, -2000)
ph1._price=-12
print(ph1.price)
#print(ph1.specification())
ph1.specification


#Inheritance OOPS
class phone: #(base class or parent class )
    def __init__(self,brand,model,price):
        self.brand=brand
        self.model=model
        self.price=price
    def full_name(self):
        return f'{self.model} {self.brand}'

    
class smartphone(phone): # To inharitate phone class in to smartphone class (derived class or child class)
    def __init__(self,brand,model,price,ram,memory):
        #phone.__init__(self,brand,model,price) # no need to build the constuctor oh phone class again
        super().__init__(brand,model,price) # second method is 'super methodno need to declare self'
        self.ram=ram
        self.memory=memory
    def specification(self):
        return f'{self.brand} {self.model} and ram is {self.ram}'
    
p1=phone('nokia',1100,2000)  
sp1=smartphone('samsung','S3',12000,'4gb','16gb')

sp1.brand  
sp1.specification()
sp1.full_name()
    
     
#multileve Inheritance
class phone: 
    def __init__(self,brand,model,price):
        self.brand=brand
        self.model=model
        self.price=price
    def full_name(self):
        return f'{self.model} {self.brand}'

    
class smartphone(phone):
    def __init__(self,brand,model,price,ram,memory):
        #phone.__init__(self,brand,model,price) # no need to build the constuctor oh phone class again
        super().__init__(brand,model,price) # second method is 'super methodno need to declare self'
        self.ram=ram
        self.memory=memory
    def specification(self):
        return f'{self.brand} {self.model} and ram is {self.ram}'
class iphone(smartphone): # Multilevel inheritance 
    def __init__(self,brand,model,price,ram,memory,operator):
        smartphone.__init__(self,brand,model,price,ram,memory)
        self.operator=operator
    def iphone_sp(self):
        return f'{self.brand} {self.model} {self.operator}ram is{self.ram}'
            
    
p1=phone('nokia',1100,2000)  
sp1=smartphone('samsung','S3',12000,'4gb','16gb')
ip1=iphone('apple','12mini',70000,'12gb','128gb','iOS')
ip1.full_name()
ip1.iphone_sp()
    
     
#MRO (method resolution order)
print(ip1.full_name())
#help(iphone)

 #ISINSTANCE and ISSUBCLASS (to check whether the objct is present)
isinstance('S3',smartphone) 
issubclass(smartphone,phone)

#without Creating instance variable
class A:
    def class_a_method(self):
        return f'hello i am class {A.__name__}'
class B:
    def class_b_method(self):
        return f'hello i am class {B.__name__}'
class C(A,B):
    pass
instance_c=C()
instance_c.class_b_method()
print(C.mro())
