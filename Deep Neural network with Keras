import numpy as np
import keras
import matplotlib.pyplot as plt
from sklearn import datasets
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
n_pts=500
np.random.seed(0)
X, y = datasets.make_circles(n_samples=n_pts,random_state=123, noise=0.1,factor=0.2)
plt.scatter(X[y==0, 0], X[y==0, 1])
plt.scatter(X[y==1, 0], X[y==1, 1])
model = Sequential()
model.add(Dense(4, input_shape=(2,) , activation='sigmoid'))
model.add(Dense(1, activation='sigmoid'))

model.compile(Adam(lr = 0.01), loss='binary_crossentropy',metrics=['accuracy'])
h=model.fit(x=X , y=y, verbose=1, batch_size=50, epochs=500, shuffle='true')
plt.plot(h.history['accuracy'])
plt.title('accuracy')
plt.xlabel('epochs')
def plot_decision_boundary(X,y, model):
    x_span=np.linspace(min(X[:,0]),max(X[:,0]))
    y_span=np.linspace(min(X[:,1]),max(X[:,1]))
    xx,yy=np.meshgrid(x_span,y_span)
    xx_,yy_=xx.ravel(),yy.ravel()
    grid=np.c_[xx_,yy_]
    predict_fun=model.predict(grid)
    z=predict_fun.reshape(xx.shape)
    plt.contourf(xx,yy,z)
plot_decision_boundary(X,y, model)
plt.scatter(X[y==0, 0], X[y==0, 1])
plt.scatter(X[y==1, 0], X[y==1, 1])
m=0.1
n=0.1
pt=np.array([[m,n]])
predict=model.predict(pt)
plt.plot([m],[n],marker='o',markersize=10,color='r')
print(predict)
