import numpy as np
import matplotlib.pyplot as plt
import random
import keras 
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
n_pts=500
np.random.seed(0)
Xa=np.array([np.random.normal(13,2,n_pts), np.random.normal(12,2,n_pts)]).T
Xb=np.array([np.random.normal(8,2,n_pts),np.random.normal(6,2,n_pts)]).T
x=np.vstack([Xa,Xb])
y=np.matrix(np.append(np.zeros(n_pts), np.ones(n_pts))).T
plt.scatter(Xa[:,0],Xa[:,1])
plt.scatter(Xb[:,0],Xb[:,1])
model=Sequential()
model.add(Dense(units=1,input_shape=(2,),activation='sigmoid'))
adam=Adam(lr=0.1)
model.compile(adam,loss='binary_crossentropy',metrics=['accuracy'])
h=model.fit(x=x,y=y, verbose=1, batch_size=50,epochs=5,shuffle='true')
plt.plot(h.history['accuracy'])
plt.title('accuracy')
plt.xlabel('epochs')
plt.plot(h.history['loss'])
plt.title('loss')
plt.xlabel('epochs')
def plot_decision_boundary(x,y,model):
    x_span=np.linspace(min(x[:,0])-1, max(x[:,0])+1,3)
    y_span=np.linspace(min(x[:,1])-1,max(x[:,1])+1,3)
    xx,yy=np.meshgrid(x_span,y_span)
    xx_,yy_=xx.ravel(),yy.ravel()
    #print(xx)
    #print(yy)
    grid=np.c_[xx_,yy_]
    grid1=np.c_[x_span,y_span]
    print(grid.shape)
    print(grid1.shape)
    predict_fun=model.predict(grid1)
    #print(predict_fun)
    z=predict_fun.reshape(xx.shape)
    plt.contourf(xx,yy,z)
    
plot_decision_boundary(x,y,model)
plt.scatter(Xa[:,0],Xa[:,1])
plt.scatter(Xb[:,0],Xb[:,1])
m=7
n=5
pt=np.array([[m,n]])
predict=model.predict(pt)
plt.plot([m],[n],marker='o',markersize=10,color='y')
#print(predict)


    
